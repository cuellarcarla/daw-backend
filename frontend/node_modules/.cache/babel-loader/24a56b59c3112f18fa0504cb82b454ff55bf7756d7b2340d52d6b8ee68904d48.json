{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/EmberLight_Projecte2/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { getCookie } from \"../utils/cookies\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // On mount, restore session from backend\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const res = await fetch(\"http://localhost:8000/auth/me/\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (!res.ok) throw new Error(\"Not authenticated\");\n        const data = await res.json();\n        setUser({\n          username: data.username,\n          email: data.email\n        });\n      } catch (err) {\n        setUser(null);\n      }\n    };\n    fetchUser();\n  }, []);\n  const login = async ({\n    username,\n    password\n  }) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/auth/login/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": getCookie(\"csrftoken\")\n        },\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        credentials: \"include\"\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || \"Login failed\");\n      const meRes = await fetch(\"http://localhost:8000/auth/me/\", {\n        credentials: \"include\"\n      });\n      const meData = await meRes.json();\n      setUser({\n        username: meData.username,\n        email: meData.email\n      });\n      return true;\n    } catch (err) {\n      throw err;\n    }\n  };\n  const logout = async () => {\n    await fetch(\"http://localhost:8000/auth/logout/\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCookie(\"csrftoken\")\n      }\n    });\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","getCookie","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","fetchUser","res","fetch","method","credentials","ok","Error","data","json","username","email","err","login","password","response","headers","body","JSON","stringify","error","meRes","meData","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/home/ubuntu/EmberLight_Projecte2/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\nimport { getCookie } from \"../utils/cookies\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  // On mount, restore session from backend\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const res = await fetch(\"http://localhost:8000/auth/me/\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        if (!res.ok) throw new Error(\"Not authenticated\");\n\n        const data = await res.json();\n        setUser({\n          username: data.username,\n          email: data.email,\n        });\n      } catch (err) {\n        setUser(null);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const login = async ({ username, password }) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/auth/login/\", {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": getCookie(\"csrftoken\"), \n        },\n        body: JSON.stringify({ username, password }),\n        credentials: \"include\",\n      });\n\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || \"Login failed\");\n\n      const meRes = await fetch(\"http://localhost:8000/auth/me/\", {\n        credentials: \"include\",\n      });\n      const meData = await meRes.json();\n\n      setUser({\n        username: meData.username,\n        email: meData.email,\n      });\n\n      return true;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const logout = async () => {\n    await fetch(\"http://localhost:8000/auth/logout/\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: { \n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCookie(\"csrftoken\"), \n      },\n    });\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}