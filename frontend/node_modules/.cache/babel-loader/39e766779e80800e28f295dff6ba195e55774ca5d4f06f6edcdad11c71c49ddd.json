{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/EmberLight_Projecte2/frontend/src/pages/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { getCookie } from '../utils/cookies';\nimport ChatLayout from '../pages/ChatLayout';\nimport Sidebar from '../components/Sidebar';\nimport Chat from '../pages/Chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatPage() {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [sessions, setSessions] = useState([]);\n  const [activeSession, setActiveSession] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [initialized, setInitialized] = useState(false);\n\n  // Initialize chat sessions\n  useEffect(() => {\n    if (!user || initialized) return;\n    const initializeChat = async () => {\n      try {\n        const res = await fetch(\"http://localhost:8000/geminiapi/sessions/\", {\n          credentials: \"include\",\n          headers: {\n            \"X-CSRFToken\": getCookie(\"csrftoken\")\n          }\n        });\n        const data = await res.json();\n        if (data.length > 0) {\n          setSessions(data);\n          setActiveSession(data[0].id);\n        }\n        setInitialized(true);\n      } catch (err) {\n        console.error(\"Failed to load sessions:\", err);\n      }\n    };\n    initializeChat();\n  }, [user, initialized]);\n\n  // Load chat history when session changes\n  useEffect(() => {\n    if (!activeSession) return;\n    const fetchHistory = async () => {\n      try {\n        const res = await fetch(`http://localhost:8000/geminiapi/sessions/${activeSession}/`, {\n          credentials: \"include\",\n          headers: {\n            \"X-CSRFToken\": getCookie(\"csrftoken\")\n          }\n        });\n        const data = await res.json();\n        setChatHistory(data.logs || []);\n      } catch (err) {\n        console.error(\"Failed to load chat history:\", err);\n      }\n    };\n    fetchHistory();\n  }, [activeSession]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!message.trim()) return;\n    setLoading(true);\n    try {\n      let sessionId = activeSession;\n\n      // Create new session if none exists\n      if (!sessionId) {\n        const newSessionRes = await fetch(\"http://localhost:8000/geminiapi/sessions/new/\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": getCookie(\"csrftoken\")\n          },\n          body: JSON.stringify({\n            title: message.substring(0, 30)\n          })\n        });\n        const newSession = await newSessionRes.json();\n        setSessions([newSession, ...sessions]);\n        setActiveSession(newSession.id);\n        sessionId = newSession.id;\n      }\n\n      // Send message\n      const res = await fetch(`http://localhost:8000/geminiapi/sessions/${sessionId}/chat/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": getCookie(\"csrftoken\")\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          message\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setChatHistory(prev => [...prev, {\n          message,\n          response: data.response\n        }]);\n        setMessage('');\n      }\n    } catch (err) {\n      console.error(\"Chat request failed:\", err);\n    }\n    setLoading(false);\n  };\n  const createNewSession = () => {\n    // Just reset the UI state for a new chat\n    // We dont need to create a new session directly, only after user has typed a message\n    setActiveSession(null);\n    setChatHistory([]);\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(ChatLayout, {\n    sidebar: /*#__PURE__*/_jsxDEV(Sidebar, {\n      sessions: sessions,\n      activeSession: activeSession,\n      onSelectSession: setActiveSession,\n      onCreateSession: createNewSession,\n      onDeleteSession: deletedSessionId => {\n        setSessions(sessions.filter(s => s.id !== deletedSessionId));\n        if (activeSession === deletedSessionId) {\n          setActiveSession(null);\n          setChatHistory([]);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this),\n    chatContent: /*#__PURE__*/_jsxDEV(Chat, {\n      history: chatHistory,\n      loading: loading,\n      onSubmit: handleSubmit,\n      message: message,\n      setMessage: setMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"5RG2brseIQV9/5dBts+hi3hJqmc=\", false, function () {\n  return [useAuth];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","useAuth","getCookie","ChatLayout","Sidebar","Chat","jsxDEV","_jsxDEV","ChatPage","_s","user","sessions","setSessions","activeSession","setActiveSession","chatHistory","setChatHistory","message","setMessage","loading","setLoading","initialized","setInitialized","initializeChat","res","fetch","credentials","headers","data","json","length","id","err","console","error","fetchHistory","logs","handleSubmit","e","preventDefault","trim","sessionId","newSessionRes","method","body","JSON","stringify","title","substring","newSession","ok","prev","response","createNewSession","sidebar","onSelectSession","onCreateSession","onDeleteSession","deletedSessionId","filter","s","fileName","_jsxFileName","lineNumber","columnNumber","chatContent","history","onSubmit","_c","$RefreshReg$"],"sources":["/home/ubuntu/EmberLight_Projecte2/frontend/src/pages/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { getCookie } from '../utils/cookies';\nimport ChatLayout from '../pages/ChatLayout';\nimport Sidebar from '../components/Sidebar';\nimport Chat from '../pages/Chat';\n\nfunction ChatPage() {\n  const { user } = useAuth();\n  const [sessions, setSessions] = useState([]);\n  const [activeSession, setActiveSession] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [initialized, setInitialized] = useState(false);\n\n  // Initialize chat sessions\n  useEffect(() => {\n    if (!user || initialized) return;\n\n    const initializeChat = async () => {\n      try {\n        const res = await fetch(\"http://localhost:8000/geminiapi/sessions/\", {\n          credentials: \"include\",\n          headers: {\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\n          },\n        });\n        const data = await res.json();\n        \n        if (data.length > 0) {\n          setSessions(data);\n          setActiveSession(data[0].id);\n        }\n        setInitialized(true);\n      } catch (err) {\n        console.error(\"Failed to load sessions:\", err);\n      }\n    };\n\n    initializeChat();\n  }, [user, initialized]);\n\n  // Load chat history when session changes\n  useEffect(() => {\n    if (!activeSession) return;\n\n    const fetchHistory = async () => {\n      try {\n        const res = await fetch(`http://localhost:8000/geminiapi/sessions/${activeSession}/`, {\n          credentials: \"include\",\n          headers: {\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\n          },\n        });\n        const data = await res.json();\n        setChatHistory(data.logs || []);\n      } catch (err) {\n        console.error(\"Failed to load chat history:\", err);\n      }\n    };\n\n    fetchHistory();\n  }, [activeSession]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!message.trim()) return;\n\n    setLoading(true);\n\n    try {\n      let sessionId = activeSession;\n      \n      // Create new session if none exists\n      if (!sessionId) {\n        const newSessionRes = await fetch(\"http://localhost:8000/geminiapi/sessions/new/\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\n          },\n          body: JSON.stringify({ title: message.substring(0, 30) }),\n        });\n        const newSession = await newSessionRes.json();\n        setSessions([newSession, ...sessions]);\n        setActiveSession(newSession.id);\n        sessionId = newSession.id;\n      }\n\n      // Send message\n      const res = await fetch(`http://localhost:8000/geminiapi/sessions/${sessionId}/chat/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": getCookie(\"csrftoken\"),\n        },\n        credentials: \"include\",\n        body: JSON.stringify({ message }),\n      });\n\n      const data = await res.json();\n\n      if (res.ok) {\n        setChatHistory(prev => [...prev, { message, response: data.response }]);\n        setMessage('');\n      }\n    } catch (err) {\n      console.error(\"Chat request failed:\", err);\n    }\n\n    setLoading(false);\n  };\n\n  const createNewSession = () => {\n    // Just reset the UI state for a new chat\n    // We dont need to create a new session directly, only after user has typed a message\n    setActiveSession(null);\n    setChatHistory([]);\n    setMessage('');\n  };\n\n  return (\n    <ChatLayout\n      sidebar={\n        <Sidebar\n          sessions={sessions}\n          activeSession={activeSession}\n          onSelectSession={setActiveSession}\n          onCreateSession={createNewSession}\n          onDeleteSession={(deletedSessionId) => {\n            setSessions(sessions.filter(s => s.id !== deletedSessionId));\n            if (activeSession === deletedSessionId) {\n              setActiveSession(null);\n              setChatHistory([]);\n            }\n          }}\n        />\n      }\n      chatContent={\n        <Chat\n          history={chatHistory}\n          loading={loading}\n          onSubmit={handleSubmit}\n          message={message}\n          setMessage={setMessage}\n        />\n      }\n    />\n  );\n}\n\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}